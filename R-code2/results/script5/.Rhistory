subplayer_data %>%
mutate(duration = event_time_dbl - c(0, event_time_dbl[-n]))
subplayer_data
player_data_tibble <-
player_data %>%
as_tibble()
player_data_tibble
subplayer_data <-
player_data_tibble %>%
select(event_category, event_id, event_time_dbl) %>%
as_tibble()
subplayer_data
player_data_tibble <-
player_data %>%
as_tibble()
player_data_tibble
player_data <- read_csv(
'~/Dropbox/ASA DataFest 2022 Data/data files/logdata/player-6607011.csv', guess_max=10000)
# turn on connection to file
con = file('~/Dropbox/ASA DataFest 2022 Data/data files/logdata/player-6607011.csv', "r")
player_data2 <- read.csv(con, nrows = 100)
# turn off connection to file
close(con)
player_data2
# the following are equivalent
round(sqrt(83), digits = 2)
sqrt(83) %>% round(digits = 2)
player_data_tibble <-
player_data %>%
as_tibble()
player_data_tibble
subplayer_data <-
player_data_tibble %>%
select(event_category, event_id, event_time_dbl) %>%
as_tibble()
subplayer_data
n <- nrow(subplayer_data)
subplayer_data <-
subplayer_data %>%
mutate(duration = event_time_dbl - c(0, event_time_dbl[-n]))
subplayer_data
subplayer_data %>% sumarise()
subplayer_data %>% summarise()
sum <- subplayer_data %>% summarise()
sum
View(sum)
View(sum)
subplayer_data %>%
group_by(event_category) %>%
summarise(mean = mean(), n = n())
subplayer_data %>%
group_by(event_category) %>%
summarise(mean = mean(event_time_dbl), n = n())
subplayer_data %>%
group_by(event_category) %>%
summarise(mean_time = mean(event_time_dbl), n = n())
n <- nrow(subplayer_data)
subplayer_data <-
subplayer_data %>%
mutate(duration = event_time_dbl - c(0, event_time_dbl[-n]))
subplayer_data
subplayer_data %>%
group_by(event_category) %>%
summarise(mean_time = mean(duration), n = n())
subplayer_data %>%
group_by(event_category) %>%
summarise(mean_time = mean(duration), n = n(), total_time = sum(duration))
pull(subplayer_data, duration) %>% head()
pull(subplayer_data, duration) %>% mean()
pull(subplayer_data, duration)
pull(subplayer_data, duration) %>% mean()
pull(subplayer_data, duration) %>% summary()
pull(subplayer_data, duration) %>% mean()
pull(subplayer_data, duration) %>% dim()
pull(subplayer_data, duration) %>% mean()
pull(subplayer_data, duration) %>% size()
pull(subplayer_data, duration) %>% View()
pull(subplayer_data, duration) %>% mean()
help("head")
pull(subplayer_data, duration) %>% head(n = 20)
pull(subplayer_data, duration) %>% mean()
View(player_data_tibble)
help("gather")
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time")
gathered
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time") %>%
arrange(event_category)
gathered
ggplot(subplayer_data, aes(x = event_category)) +
geom_histogram()
ggplot(subplayer_data, aes(x = event_category)) +
geom_bar()
ggplot(subplayer_data, aes(x = event_category)) +
geom_bar()
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar()
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity")
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity") + coord_flip()
help(geom_bar)
help("stat_count")
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity", position = "dodge") + coord_flip()
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity") + coord_flip()
ggplot(subplayer_data, aes(x = event_time_dbl, y = duration)) + geom_point()
ggplot(subplayer_data, aes(x = event_time_dbl, y = duration)) + geom_line() + geom_point()
ggplot(subplayer_data2, aes(x = event_time_dbl, y = duration)) + geom_line() + geom_point()
# turn on connection to file
con = file('~/Dropbox/ASA DataFest 2022 Data/data files/logdata/player-6607011.csv', "r")
player_data2 <- read.csv(con, nrows = 100)
# turn off connection to file
close(con)
player_data2
subplayer_data2 <- subplayer_data[1:500,]
ggplot(subplayer_data2, aes(x = event_time_dbl, y = duration)) + geom_line() + geom_point()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(epade)
player_data_tibble <-
player_data %>%
as_tibble() %>%
vignette()
help(tibble)
player_data_tibble <-
player_data %>%
as_tibble() %>%
player_data_tibble <-
player_data %>%
as_tibble()
player_data_tibble
help(tibble)
help("tibble")
help("as_tibble","tibble")
subplayer_data %>%
filter(event_category == "Challenge Stack")
player_data %>%
filter(!(is.na(skill_level_me)))
temp <-
player_data %>%
filter(!(is.na(skill_level_me)))
View(temp)
temp <-
player_data %>%
filter(!(is.na(avatar_age)))
View(temp)
temp <-
player_data %>%
filter(!(is.na(chunk_id)))
View(temp)
temp <-
player_data %>%
filter(!(is.na(chunk_id)))
View(temp)
player_data$event_type %>% levels()
temp <-
player_data %>%
filter(!(is.na(chunk_id)))
View(temp)
player_data$event_type %>% as.factor() %>% levels()
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time") %>%
arrange(event_category)
gathered
gathered %>%
spread(key = "time-type",
value = "time")
gathered %>%
spread(key = "time-type",
value = "time")
gathered %>%
spread(key = "time-type",
value = "time")
gathered %>%
spread(key = "time-type",
value = "time")
gathered %>%
spread(key = "time-type",
value = "time")
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time") %>%
gathered
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time")
gathered
gathered %>%
spread(key = "time-type",
value = "time")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(epade)
player_data <- read_csv(
'~/Dropbox/ASA DataFest 2022 Data/data files/logdata/player-6607011.csv', guess_max=10000)
# turn on connection to file
con = file('~/Dropbox/ASA DataFest 2022 Data/data files/logdata/player-6607011.csv', "r")
player_data2 <- read.csv(con, nrows = 100)
# turn off connection to file
close(con)
player_data2
# the following are equivalent
round(sqrt(83), digits = 2)
sqrt(83) %>% round(digits = 2)
player_data_tibble <-
player_data %>%
as_tibble()
player_data_tibble
help("rownames_to_column", "tibble")
subplayer_data <-
player_data_tibble %>%
select(event_category, event_id, event_time_dbl) %>%
as_tibble()
subplayer_data
subplayer_data %>%
select(-c(event_id))
subplayer_data %>%
arrange(event_category)
subplayer_data %>%
filter(event_category == "Challenge Stack")
temp <-
player_data %>%
filter(!(is.na(chunk_id)))
View(temp)
player_data$event_type %>% as.factor() %>% levels()
n <- nrow(subplayer_data)
subplayer_data <-
subplayer_data %>%
mutate(duration = event_time_dbl - c(0, event_time_dbl[-n]))
subplayer_data
subplayer_data %>%
group_by(event_category) %>%
summarise(mean_time = mean(duration), n = n(), total_time = sum(duration))
pull(subplayer_data, duration) %>% head(n = 20)
pull(subplayer_data, duration) %>% mean()
gathered <-
subplayer_data %>%
gather(c(event_time_dbl, duration),
key = "time-type",
value = "time")
gathered
gathered %>%
spread(key = "time-type",
value = "time")
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity") + coord_flip()
subplayer_data2 <- subplayer_data[1:500,]
ggplot(subplayer_data2, aes(x = event_time_dbl, y = duration)) + geom_line() + geom_point()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_density()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_density()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_histogram()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_density()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_histogram(binwidth = 1)
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_density()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_histogram(binwidth = 2)
data(mtcars)
data("iris")
head(iris)
data("iris")
head(iris)
iris %>% gather(c(Petal.Width, Sepal.Width),
key = "width-type",
value = "width")
data("iris")
head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Sepal.Width),
key = "width-type",
value = "width")
gathered %>%
spread(key = "width-type",
value = "width")
data("iris")
head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length),
key = "measure-type",
value = "measure")
data("iris")
head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length),
key = "measure-type",
value = "measure")
data("iris")
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length),
key = "measure-type",
value = "measure")
data("iris")
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length),
key = "measure-type",
value = "measure")
gathered
data("iris")
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length, Sepal.Length, Sepal.Width),
key = "measure-type",
value = "measure")
gathered
gathered %>%
spread(key = "measure-type",
value = "measure")
data("iris")
iris$sample_num <- seq.int(nrow(iris))
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Petal.Length, Sepal.Length, Sepal.Width),
key = "measure-type",
value = "measure")
gathered
gathered %>%
spread(key = "measure-type",
value = "measure")
data("iris")
iris$sample_num <- seq.int(nrow(iris))
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Sepal.Width),
key = "width-type",
value = "width")
gathered
gathered %>%
spread(key = "measure-type",
value = "measure")
gathered %>%
spread(key = "width-type",
value = "width")
data("iris")
data("iris")
iris
iris$sample_num <- seq.int(nrow(iris))
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Sepal.Width),
key = "width-type",
value = "width")
gathered
iris$sample_num <- seq.int(nrow(iris))
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Sepal.Width, Petal.Length, Sepal.Length),
key = "measure-type",
value = "measure")
gathered
iris$sample_num <- seq.int(nrow(iris))
#head(iris)
gathered <-
iris %>% gather(c(Petal.Width, Sepal.Width),
key = "width-type",
value = "width")
gathered
gathered %>%
spread(key = "width-type",
value = "width")
ggplot(subplayer_data, aes(x = event_category, y = duration)) +
geom_bar(stat = "identity") + coord_flip()
subplayer_data2 <- subplayer_data[1:500,]
ggplot(subplayer_data2, aes(x = event_time_dbl, y = duration)) + geom_line() + geom_point()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_density()
ggplot(subplayer_data2, aes(x = duration, color = event_category)) +
geom_histogram(binwidth = 2)
test <- ones(4,1)
matrix(1,4,1)
292.2532/200
111.4804/200
111.7781/200
327.7571/200
195.8345/200
55.9057/200
96.0681/200
147.2218/200
34.9867/200
47.8487/200
119.3539/200
25.3638/200
30.8969/200
137.4826/200
31.367/200
41.0866/200
117.0069/2
24.5538/200
29.5989/2
132.7294/200
29.7291/200
38.2034/200
# testing the new RgPCC function for simulated data
source('../functions/simulation_function.r')
getwd()
setwd("GitProjects/RgPCC/R-code2/scripts/")
# testing the new RgPCC function for simulated data
source('../functions/simulation_function.r')
# =================================================================================
# PARAMETERS
# =================================================================================
p <- 12 # number of predictor variables
my.sample_size_set <- c(100,200) # sample size of each sample
# covariance matrix generation
my.rho <- 0.8
# tolerance of Newton-Ralphson method
my.tol <- 0.1
# number of replications of the experiment
my.N <- 35
# where output gets saved
mywd <- "results/script5"
# =================================================================================
# sparsity 1, debug
# =================================================================================
case1results <- RgPCC.lasso.simulated.exp.v4(sample_size_set = my.sample_size_set,
gamma_set = rbind(c(rep(2,5), 20, 10, 10, rep(2, p-8))),
gamma_index = "0",
rho = my.rho,
p = p,
N = my.N,
lambda_set = seq(0, 60, 2),
time_units = "min",
tol_0 = my.tol,
wd = mywd,
save.name="script-5")
getwd()
setwd('..')
getwd()
setwd('scripts/')
# testing the new RgPCC function for simulated data
source('../functions/simulation_function.r')
# =================================================================================
# PARAMETERS
# =================================================================================
p <- 12 # number of predictor variables
my.sample_size_set <- c(100,200) # sample size of each sample
# covariance matrix generation
my.rho <- 0.8
# tolerance of Newton-Ralphson method
my.tol <- 0.1
# number of replications of the experiment
my.N <- 35
# where output gets saved
mywd <- "results/script5"
# =================================================================================
# sparsity 1, debug
# =================================================================================
case1results <- RgPCC.lasso.simulated.exp.v4(sample_size_set = my.sample_size_set,
gamma_set = rbind(c(rep(2,5), 20, 10, 10, rep(2, p-8))),
gamma_index = "0",
rho = my.rho,
p = p,
N = my.N,
lambda_set = seq(0, 60, 2),
time_units = "min",
tol_0 = my.tol,
wd = mywd,
save.name="script-5")
mywd
getwd()
setwd('scripts/')
# testing the new RgPCC function for simulated data
source('../functions/simulation_function.r')
# =================================================================================
# PARAMETERS
# =================================================================================
p <- 12 # number of predictor variables
my.sample_size_set <- c(100,200) # sample size of each sample
# covariance matrix generation
my.rho <- 0.8
# tolerance of Newton-Ralphson method
my.tol <- 0.1
# number of replications of the experiment
my.N <- 35
# where output gets saved
mywd <- "results/script5"
# =================================================================================
# sparsity 1, debug
# =================================================================================
case1results <- RgPCC.lasso.simulated.exp.v4(sample_size_set = my.sample_size_set,
gamma_set = rbind(c(rep(2,5), 20, 10, 10, rep(2, p-8))),
gamma_index = "0",
rho = my.rho,
p = p,
N = my.N,
lambda_set = seq(0, 60, 2),
time_units = "min",
tol_0 = my.tol,
wd = mywd,
save.name="script-5")
