# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model.summary()
summary(model)
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
summary(model)
plot(model)
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
predict(model, newx = data.test$X, type='class', s = model$lambda.min)
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
error = (data.test.yhat - data.test$Y)^2
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
error = (as.integer(data.test.yhat) - data.test$Y)^2
error
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
error = sum((as.integer(data.test.yhat) - data.test$Y)^2)
error
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
# predict and calculate metrics
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
data.test.phat <- predict(model, newx = data.test$X, type='prob', s = model$lambda.min)
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
# predict and calculate metrics
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
data.test.phat <- predict(model, newx = data.test$X, type='response', s = model$lambda.min)
data.test.phat
misclassification_error = sum((as.integer(data.test.yhat) - data.test$Y)^2)
prob_error = sum((data.test.phat - data.test$prob)^2)
misclassification_error
prob_error
# title: script1.r
# author: Duncan Bennett
# description: Compare the performance of RgPCC and penalized logistic
# regression via glmnet. The metrics used should be the same as the previous
# experiments. This calls experiment1.r which gives us the function that
# controls the experiment (similar to RgPCC_lasso_simulated_experiment.r)
source('RTG_functions.R')
source('experiment1.r')
# modifiable parameters
# ------------------------------------------------------------------------------
n <- 100 # sample size
p <- 15 # dimension of data
mu <- rep(0, p)# mean
rho <- 0.8 # covariance factor
gamma <- c(0, 0, 0, 20, 10, 5, rep(0, p-6))
seed <- 1234
# ------------------------------------------------------------------------------
# unmodifiable parameters
# ------------------------------------------------------------------------------
Sigma <- matrix(c(1:(p*p)), nrow = p);
for(i in 1:p) {
for (j in 1:p) {
Sigma[i,j] <- (rho)^abs(i - j)
}
}
# ------------------------------------------------------------------------------
# script
# make data
data.train <- sim_data(
n,
rep(0, p),
Sigma,
gamma,
seed
)
data.test <- sim_data(
5*n,
rep(0, p),
Sigma,
gamma,
seed+100
)
model <- lasso.log.process(
data.train$X,
data.train$Y,
data.train$prob,
data.test$X,
data.test$Y,
data.test$prob
)
model$lambda.min
# predict and calculate metrics
data.test.yhat <- predict(model, newx = data.test$X, type='class', s = model$lambda.min)
data.test.phat <- predict(model, newx = data.test$X, type='response', s = model$lambda.min)
misclassification_error = mean((as.integer(data.test.yhat) - data.test$Y)^2)
prob_error = sum((data.test.phat - data.test$prob)^2)
misclassification_error
